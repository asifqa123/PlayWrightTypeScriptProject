import { test, expect, type Page } from '@playwright/test';
import { HomePage } from '../pages/HomePage';
import { SignupPage, type SignupUserDetails } from '../pages/SignupPage';
import { ProductsPage } from '../pages/ProductsPage';
import { CartPage } from '../pages/CartPage';
import { CheckoutPage } from '../pages/CheckoutPage';
import { LoginPage } from '../pages/LoginPage';
import { faker } from '@faker-js/faker';
// No specific test data file needed for this one as all data is generated by faker

interface TestUserData extends SignupUserDetails {
    signupName: string; // Name used for the initial signup form's "Name" field
}

test.describe('Test Case 23: Verify Address Details in Checkout Page', () => {
    let homePage: HomePage;
    let signupPage: SignupPage;
    let loginPage: LoginPage;
    let productsPage: ProductsPage;
    let cartPage: CartPage;
    let checkoutPage: CheckoutPage;
    let userData: TestUserData;

    test.beforeEach(async ({ page }: { page: Page }) => {
        homePage = new HomePage(page);
        signupPage = new SignupPage(page);
        loginPage = new LoginPage(page);
        productsPage = new ProductsPage(page);
        cartPage = new CartPage(page);
        checkoutPage = new CheckoutPage(page);

        const generatedFirstNameForSignup = faker.person.firstName();
        const generatedFirstNameForAddress = faker.person.firstName(); // Can be same or different

        userData = {
            title: faker.helpers.arrayElement(['Mr', 'Mrs'] as const),
            signupName: generatedFirstNameForSignup,
            email: faker.internet.email(),
            password: faker.internet.password({ length: 10, prefix: 'Test!' }),
            dayOfBirth: faker.number.int({ min: 1, max: 28 }).toString(),
            monthOfBirth: faker.date.month(),
            yearOfBirth: faker.number.int({ min: 1970, max: 2005 }).toString(),
            firstName: generatedFirstNameForAddress,
            lastName: faker.person.lastName(),
            company: faker.company.name(),
            address1: faker.location.streetAddress(),
            address2: faker.location.secondaryAddress(),
            country: 'United States',
            state: faker.location.state(),
            city: faker.location.city(),
            zipcode: faker.location.zipCode(),
            mobileNumber: faker.phone.number(),
            newsletter: true,
            optin: true
        };
    });

    test('Verify Address Details Match Registration in Checkout', async ({ page }: { page: Page }) => {
        await homePage.goto();
        await homePage.clickSignupLoginLink();

        const adSelector = '#ad_position_box'; // Define ad selector for reuse
        const removeAdScript = (sel: string) => document.querySelector(sel)?.remove();
        if (await page.locator(adSelector).isVisible({ timeout: 3000 })) {
            await page.evaluate(removeAdScript, adSelector);
        }

        await loginPage.enterSignupName(userData.signupName);
        await loginPage.enterSignupEmail(userData.email);
        await loginPage.clickSignupButton();

        await expect(signupPage.isAccountInfoTextVisible()).resolves.toBeTruthy();
        await signupPage.fillAccountDetails(userData); // Pass the complete userData object
        await signupPage.clickCreateAccountButton();

        await expect(signupPage.isAccountCreatedVisible()).resolves.toBeTruthy();
        await signupPage.clickContinueButton();

        if (await page.locator(adSelector).isVisible({ timeout: 5000 })) {
            await page.evaluate(removeAdScript, adSelector);
        }

        await expect(homePage.isLoggedInAsVisible(userData.signupName)).resolves.toBeTruthy();

        await homePage.clickProductsLink();
        await productsPage.addProductToCartByName('Blue Top');
        await productsPage.clickContinueShopping();

        await homePage.clickCartLink();
        await expect(cartPage.isShoppingCartVisible()).resolves.toBeTruthy();

        await cartPage.clickProceedToCheckout();
        await expect(checkoutPage.isAddressDetailsVisible()).resolves.toBeTruthy();

        const deliveryDetails = await checkoutPage.getDeliveryAddressDetails();
        expect(deliveryDetails.title).toBe(userData.title + '.'); // Checkout page adds a period
        expect(deliveryDetails.firstName).toBe(userData.firstName);
        expect(deliveryDetails.lastName).toBe(userData.lastName);
        expect(deliveryDetails.company).toBe(userData.company);
        expect(deliveryDetails.address1).toBe(userData.address1);
        expect(deliveryDetails.address2).toBe(userData.address2 || '');
        expect(deliveryDetails.city).toBe(userData.city);
        expect(deliveryDetails.state).toBe(userData.state);
        expect(deliveryDetails.zipcode).toBe(userData.zipcode);
        expect(deliveryDetails.country).toBe(userData.country);
        expect(deliveryDetails.phone).toBe(userData.mobileNumber);

        const billingDetails = await checkoutPage.getBillingAddressDetails();
        expect(billingDetails.title).toBe(userData.title + '.');
        expect(billingDetails.firstName).toBe(userData.firstName);
        expect(billingDetails.lastName).toBe(userData.lastName);
        expect(billingDetails.company).toBe(userData.company);
        expect(billingDetails.address1).toBe(userData.address1);
        expect(billingDetails.address2).toBe(userData.address2 || '');
        expect(billingDetails.city).toBe(userData.city);
        expect(billingDetails.state).toBe(userData.state);
        expect(billingDetails.zipcode).toBe(userData.zipcode);
        expect(billingDetails.country).toBe(userData.country);
        expect(billingDetails.phone).toBe(userData.mobileNumber);

        await homePage.clickDeleteAccountLink();
        await expect(homePage.isAccountDeletedVisible()).resolves.toBeTruthy();
        await homePage.clickDeleteContinueButton();

        await expect(page).toHaveURL(/.*(login|index|\/)$/);
        await expect(homePage.isLoggedInAsVisible(userData.signupName)).resolves.toBeFalsy();
    });
});
